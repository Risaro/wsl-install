#!/usr/bin/env python3

import os
import sys
import subprocess
import re
import getpass
from pathlib import Path

def run(cmd, sudo=True, check=True):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ subprocess.run.
    :param cmd: —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    :param sudo: –¥–æ–±–∞–≤–∏—Ç—å sudo
    :param check: –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    if sudo:
        if isinstance(cmd, str):
            full_cmd = f"sudo {cmd}"
        elif isinstance(cmd, list):
            full_cmd = ["sudo"] + cmd
        else:
            raise TypeError("cmd must be str or list")
    else:
        full_cmd = cmd

    try:
        result = subprocess.run(
            full_cmd,
            shell=isinstance(full_cmd, str),
            check=check,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8',
            env=os.environ
        )
        return result
    except FileNotFoundError as e:
        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {full_cmd}")
        print(f"   –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {full_cmd}")
        print(f"   –ö–æ–¥: {e.returncode}")
        if e.stderr:
            print(f"   –û—à–∏–±–∫–∞: {e.stderr.strip()}")
        if not check:
            return e  # –í–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def detect_gpu():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø GPU —á–µ—Ä–µ–∑ lspci"""
    print("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø GPU...")
    result = run(["lspci", "-v"], check=False)
    if result.returncode != 0:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å lspci. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CPU OpenCL...")
        return "unknown"

    output = result.stdout.lower()
    if "nvidia" in output:
        return "nvidia"
    elif "amd" in output or "radeon" in output or "advanced micro devices" in output:
        return "amd"
    elif "intel" in output:
        return "intel"
    else:
        return "unknown"

def setup_wsl_conf(username):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ /etc/wsl.conf"""
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º /etc/wsl.conf...")
    wsl_conf = f'''[automount]
enabled=true

[user]
default={username}

[boot]
command = "service dbus start"
'''
    conf_path = "/tmp/wsl.conf"
    Path(conf_path).write_text(wsl_conf, encoding='utf-8')
    run(["cp", conf_path, "/etc/wsl.conf"])
    print("‚úÖ /etc/wsl.conf –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def install_gui(username):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XFCE –∏ xRDP"""
    print("üé® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º XFCE –∏ xRDP...")
    run(["apt", "update", "-qq"])
    run(["apt", "install", "-y", "xfce4", "xfce4-goodies", "xrdp", "dbus-x11"])

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .xsession
    session_file = f"/home/{username}/.xsession"
    run(["sh", "-c", f"echo 'xfce4-session' > {session_file}"])
    run(["chown", f"{username}:{username}", session_file])

    # –ó–∞–ø—É—Å–∫ xRDP
    run(["service", "xrdp", "start"])
    run(["systemctl", "enable", "xrdp"], check=False)
    print("‚úÖ GUI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def install_tools():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üõ†Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º htop, nano, git, curl...")
    run(["apt", "install", "-y",
         "htop", "nano", "wget", "curl", "git",
         "software-properties-common", "gnupg2"])
    print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def install_nvidia():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CUDA –¥–ª—è WSL"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CUDA –¥–ª—è NVIDIA...")
    run(["wget", "-q", "https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin"])
    run(["mv", "cuda-wsl-ubuntu.pin", "/etc/apt/sources.list.d/cuda-pin.list"])
    run(["apt-key", "adv", "--fetch-keys", "https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/3bf863cc.pub"])
    run(["add-apt-repository", "deb https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/ /", "-y"])
    run(["apt", "update"])
    run(["apt", "install", "-y", "cuda-toolkit-12-4"])
    run(["nvidia-smi"])
    print("‚úÖ CUDA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def install_amd():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ROCm"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ROCm –¥–ª—è AMD...")
    run(["apt", "install", "-y", "wget", "gnupg2"])
    run(["wget", "-q", "-O", "-", "https://repo.radeon.com/rocm/rocm.gpg.key"], stdout=subprocess.PIPE)
    result = subprocess.run(
        ["wget", "-q", "-O", "-", "https://repo.radeon.com/rocm/rocm.gpg.key"],
        capture_output=True, text=True
    )
    run(["apt-key", "add", "-"], input=result.stdout)
    run(["sh", "-c", "echo 'deb [arch=amd64] https://repo.radeon.com/rocm/apt/5.7 jammy main' > /etc/apt/sources.list.d/rocm.list"])
    run(["apt", "update"])
    run(["apt", "install", "-y", "rocm-opencl-runtime", "rocm-utils"])
    run(["usermod", "-aG", "render", getpass.getuser()])
    print("‚úÖ ROCm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def install_intel():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ Intel"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä—ã Intel...")
    run(["apt", "install", "-y", "intel-level-zero-gpu", "intel-opencl-icd"])
    print("‚úÖ –î—Ä–∞–π–≤–µ—Ä—ã Intel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def install_cpu_opencl():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenCL –¥–ª—è CPU"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OpenCL –¥–ª—è CPU...")
    run(["apt", "install", "-y", "ocl-icd-opencl-dev", "pocl-opencl-icd"])
    print("‚úÖ CPU OpenCL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    if os.geteuid() != 0:
        print("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root (—á–µ—Ä–µ–∑ sudo).")
        print("   –ü—Ä–∏–º–µ—Ä: sudo python3 setup-wsl.py <username>")
        sys.exit(1)

    if len(sys.argv) != 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sudo python3 setup-wsl.py <username>")
        sys.exit(1)

    username = sys.argv[1]
    print(f"üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WSL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = run(["id", "-u", username], check=False)
    if result.returncode != 0:
        print(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (UID: {result.stdout.strip()})")

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setup_wsl_conf(username)
    install_gui(username)
    install_tools()

    gpu = detect_gpu()
    print(f"üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω GPU: {gpu.upper()}")

    if gpu == "nvidia":
        install_nvidia()
    elif gpu == "amd":
        install_amd()
    elif gpu == "intel":
        install_intel()
    else:
        install_cpu_opencl()

    # –§–∏–Ω–∞–ª
    ip = run(["hostname", "-I"], check=False).stdout.strip().split()[0]
    print("\n" + "="*60)
    print("‚úÖ –£–°–¢–ê–ù–û–í–ö–ê WSL –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üñ•Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    print(f"üåê IP-–∞–¥—Ä–µ—Å: {ip}")
    print(f"üö™ –ü–æ—Ä—Ç RDP: 3389")
    print("üí° –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Remote Desktop –∫:")
    print(f"   {ip}:3389")
    print("   –õ–æ–≥–∏–Ω: –∏–º—è –∏ –ø–∞—Ä–æ–ª—å –æ—Ç WSL")
    print("="*60)

if __name__ == "__main__":
    main()
