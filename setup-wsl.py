#!/usr/bin/env python3

import os
import sys
import subprocess
import getpass
from pathlib import Path

def run(cmd, sudo=True, check=True, shell=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã"""
    if sudo:
        if isinstance(cmd, str):
            full_cmd = f"sudo {cmd}"
        elif isinstance(cmd, list):
            full_cmd = ["sudo"] + cmd
        else:
            raise TypeError("cmd must be str or list")
    else:
        full_cmd = cmd

    try:
        result = subprocess.run(
            full_cmd,
            shell=shell,
            check=check,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8',
            env=os.environ
        )
        return result
    except FileNotFoundError as e:
        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {full_cmd}")
        print(f"   –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {full_cmd}")
        print(f"   –ö–æ–¥: {e.returncode}")
        if e.stderr:
            print(f"   –û—à–∏–±–∫–∞: {e.stderr.strip()}")
        if not check:
            return e
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def detect_gpu():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø GPU"""
    print("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø GPU...")
    result = run(["lspci", "-v"], check=False)
    if result.returncode != 0:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å lspci. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CPU OpenCL...")
        return "unknown"
    output = result.stdout.lower()
    if "nvidia" in output:
        return "nvidia"
    elif "amd" in output or "radeon" in output:
        return "amd"
    elif "intel" in output:
        return "intel"
    else:
        return "unknown"

def fix_wsl_conf(username):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ /etc/wsl.conf —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º dbus –∏ xrdp"""
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º /etc/wsl.conf...")
    wsl_conf = f'''[automount]
enabled=true

[user]
default={username}

[boot]
command = "sudo service dbus start; sudo service xrdp start"
'''
    conf_path = "/tmp/wsl.conf"
    Path(conf_path).write_text(wsl_conf, encoding='utf-8')
    run(["cp", conf_path, "/etc/wsl.conf"])
    print("‚úÖ /etc/wsl.conf –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ dbus –∏ xrdp)")

def fix_xrdp_config(username):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º startwm.sh –¥–ª—è xRDP"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º /etc/xrdp/startwm.sh...")
    startwm_content = '''#!/bin/sh
        if [ -r /etc/X11/xinit/xinitrc ]; then
          . /etc/X11/xinit/xinitrc
        else
          startxfce4 &
        fi
        '''
    startwm_path = "/tmp/startwm.sh"
    Path(startwm_path).write_text(startwm_content, encoding='utf-8')
    run(["cp", startwm_path, "/etc/xrdp/startwm.sh"])
    run(["chmod", "+x", "/etc/xrdp/startwm.sh"])
    print("‚úÖ /etc/xrdp/startwm.sh –æ–±–Ω–æ–≤–ª—ë–Ω")
def setup_keyboard_layout(username, home_dir):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏: —Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ Left Shift + Left Alt"""
    print("‚å®Ô∏è  –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ (—Ä—É—Å/–∞–Ω–≥–ª)...")

    # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É XFCE
    xfconf_dir = f"{home_dir}/.config/xfce4/xfconf/xfce-perchannel-xml"
    os.makedirs(xfconf_dir, exist_ok=True)
    keyboard_file = f"{xfconf_dir}/keyboard-layout.xml"

    # XML-–∫–æ–Ω—Ñ–∏–≥ –¥–ª—è xfconf
    keyboard_xml = '''<?xml version="1.0" encoding="UTF-8"?>
            <channel name="keyboard-layout" version="1.0">
              <property name="Default" type="empty">
                <property name="XkbDisable" type="bool" value="false"/>
                <property name="XkbLayout" type="string" value="us,ru"/>
                <property name="XkbVariant" type="string" value=",winkeys"/>
                <property name="XkbOptions" type="string" value="grp:lalt_lshift_toggle,grp_led:scroll"/>
              </property>
            </channel>
            '''
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    Path(keyboard_file).write_text(keyboard_xml, encoding='utf-8')
    run(["chown", "-R", f"{username}:{username}", f"{home_dir}/.config"])

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ xfconf –Ω–µ –ø—Ä–∏–º–µ—Ç XML)
    autostart_dir = f"{home_dir}/.config/autostart"
    os.makedirs(autostart_dir, exist_ok=True)
    kbd_desktop = f"{autostart_dir}/set-keyboard.desktop"

    autostart_entry = '''[Desktop Entry]
            Type=Application
            Name=Set Keyboard Layout
            Exec=setxkbmap -layout "us,ru" -variant ",winkeys" -option "grp:lalt_lshift_toggle,grp_led:scroll"
            Hidden=false
            NoDisplay=true
            X-GNOME-Autostart-enabled=true
            '''
    Path(kbd_desktop).write_text(autostart_entry, encoding='utf-8')
    run(["chmod", "+x", kbd_desktop])
    run(["chown", "-R", f"{username}:{username}", autostart_dir])

    print("‚úÖ –†–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: Shift+Alt ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É us/ru")
def fix_user_session(username, home_dir):
    """–°–æ–∑–¥–∞—ë–º .xsession –∏ .xprofile"""
    print(f"üìÅ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è {username}...")

    # .xsession
    xsession = f"{home_dir}/.xsession"
    Path(xsession).write_text("startxfce4\n", encoding='utf-8')
    run(["chown", f"{username}:{username}", xsession])
    run(["chmod", "+x", xsession])

    # .xprofile ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º WSLg
    xprofile = f"{home_dir}/.xprofile"
    xprofile_content = '''unset DISPLAY
unset WAYLAND_DISPLAY
unset XDG_SESSION_TYPE
'''
    Path(xprofile).write_text(xprofile_content, encoding='utf-8')
    run(["chown", f"{username}:{username}", xprofile])

    print("‚úÖ .xsession –∏ .xprofile –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def install_gui(username):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ XFCE –∏ xRDP"""
    print("üé® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º XFCE –∏ xRDP...")
    run(["apt", "update", "-qq"])
    run(["apt", "install", "-y", "xfce4", "xfce4-goodies", "xrdp", "dbus-x11", "xorg"])

    # –ü—Ä–∞–≤–∞ –¥–ª—è xrdp
    run(["adduser", "xrdp", "ssl-cert"])

    # fix_user_session –∏ setup_keyboard_layout –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤ main()
    # –≥–¥–µ home_dir —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω

    # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ xrdp
    run(["systemctl", "enable", "xrdp"], check=False)

    print("‚úÖ GUI –∏ xRDP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def install_tools():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üõ†Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º htop, nano, git, curl...")
    run(["apt", "install", "-y",
         "htop", "nano", "wget", "curl", "git",
         "software-properties-common", "gnupg2", "net-tools","pciutils","python3"])
    print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def install_nvidia():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CUDA –¥–ª—è WSL"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CUDA –¥–ª—è NVIDIA...")
    run(["apt-key", "adv", "--fetch-keys", "https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/3bf863cc.pub"])
    run(["add-apt-repository", "deb https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/ /", "-y"])
    run(["apt", "update"])
    run(["apt", "install", "-y", "cuda-toolkit"])
    run(["nvidia-smi"])
    print("‚úÖ CUDA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def install_amd():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ROCm"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ROCm –¥–ª—è AMD...")
    run(["apt", "install", "-y", "wget", "gnupg2"])
    result = run(["wget", "-q", "-O", "-", "https://repo.radeon.com/rocm/rocm.gpg.key"], stdout=subprocess.PIPE)
    run(["apt-key", "add", "-"], input=result.stdout)
    run(["sh", "-c", "echo 'deb [arch=amd64] https://repo.radeon.com/rocm/apt/5.7 jammy main' > /etc/apt/sources.list.d/rocm.list"])
    run(["apt", "update"])
    run(["apt", "install", "-y", "rocm-opencl-runtime", "rocm-utils"])
    run(["usermod", "-aG", "render", getpass.getuser()])
    print("‚úÖ ROCm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def install_intel():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ Intel"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä—ã Intel...")
    run(["apt", "install", "-y", "intel-level-zero-gpu", "intel-opencl-icd"])
    print("‚úÖ –î—Ä–∞–π–≤–µ—Ä—ã Intel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def install_cpu_opencl():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenCL –¥–ª—è CPU"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OpenCL –¥–ª—è CPU...")
    run(["apt", "install", "-y", "ocl-icd-opencl-dev", "pocl-opencl-icd"])
    print("‚úÖ CPU OpenCL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    if os.geteuid() != 0:
        print("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root (—á–µ—Ä–µ–∑ sudo).")
        print("   –ü—Ä–∏–º–µ—Ä: sudo python3 setup-wsl.py <username>")
        sys.exit(1)

    if len(sys.argv) != 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sudo python3 setup-wsl.py <username>")
        sys.exit(1)

    username = sys.argv[1]
    print(f"üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WSL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = run(["id", "-u", username], check=False)
    if result.returncode != 0:
        print(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (UID: {result.stdout.strip()})")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    fix_wsl_conf(username)
    # --- –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    result = run(["getent", "passwd", username], check=False)
    if result.returncode != 0:
        print(f"üõë –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '{username}'")
        sys.exit(1)
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É passwd: user:x:1000:1000:,,,:/home/user:/bin/bash
    home_dir = result.stdout.strip().split(':')[5]

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ home_dir
    fix_user_session(username, home_dir)
    setup_keyboard_layout(username, home_dir)
    install_gui(username)
    install_tools()

    gpu = detect_gpu()
    print(f"üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω GPU: {gpu.upper()}")

    if gpu == "nvidia":
        install_nvidia()
    elif gpu == "amd":
        install_amd()
    elif gpu == "intel":
        install_intel()
    else:
        install_cpu_opencl()

    # –§–∏–Ω–∞–ª
    ip = run(["hostname", "-I"], check=False).stdout.strip().split()[0]

    print("\n" + "="*60)
    print("‚úÖ –£–°–¢–ê–ù–û–í–ö–ê WSL –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üñ•Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    print(f"üåê IP-–∞–¥—Ä–µ—Å: {ip}")
    print(f"üö™ –ü–æ—Ä—Ç RDP: 3389")
    print("üí° –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Remote Desktop –∫:")
    print(f"   {ip}:3389")
    print("   –õ–æ–≥–∏–Ω: –∏–º—è –∏ –ø–∞—Ä–æ–ª—å –æ—Ç WSL")
    print("   –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'Xorg' –≤ –ø–æ–ª–µ '–ú–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'")
    print("="*60)
    print("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–ï WSL , –ß–¢–û–ë–´ –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–ú–ï–ù–ò–õ–ò–°–¨")
    print("–æ—Ç–∫—Ä–æ–π—Ç–µ CMD")
    print("wsl --shutdown")
    print("wsl")
    print("–í—Å–µ –∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ")

if __name__ == "__main__":
    main()
