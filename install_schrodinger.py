#!/usr/bin/env python3

import os
import sys
import subprocess
import shutil
from pathlib import Path
from datetime import datetime

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
LOG_FILE = None

def log(message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")
    if LOG_FILE:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {message}\n")

def run(cmd, sudo=False, check=False, shell=False, env=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã"""
    if sudo:
        if isinstance(cmd, str):
            full_cmd = f"sudo {cmd}"
        elif isinstance(cmd, list):
            full_cmd = ["sudo"] + cmd
        else:
            raise TypeError("cmd must be str or list")
    else:
        full_cmd = cmd

    try:
        result = subprocess.run(
            full_cmd,
            shell=shell,
            check=check,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8',
            env=env or os.environ
        )
        return result
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {full_cmd}")
        log(f"   {e}")
        sys.exit(1)

def install_x11_deps():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ X11/Qt-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    log("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è GUI (X11, Qt, xcb)...")
    packages = [
        "libxcb-cursor0", "libxkbcommon-x11-0", "libxcb-xinerama0",
        "libxcb-randr0", "libxcb-xtest0", "libxcb-shape0", "libxcb-xfixes0",
        "libx11-xcb1", "libxcb1",
        "libxcb-util1", "libxcb-icccm4", "libxcb-keysyms1", "libxcb-image0",
        "libxcb-render-util0", "libxrender1", "libxext6", "libx11-6",
        "libglx-mesa0", "libdbus-1-3", "xorg"
    ]

    failed = []
    for pkg in packages:
        result = run(["apt", "install", "-y", pkg], sudo=True, check=False)
        if result.returncode != 0:
            log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {pkg}")
            failed.append(pkg)
        else:
            log(f"‚úÖ {pkg} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    if failed:
        log(f"‚ö†Ô∏è  –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã: {', '.join(failed)}")
        log("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é.")
    else:
        log("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def create_windows_shortcut(schrod_dir, wsl_user):
    """
    –°–æ–∑–¥–∞—ë—Ç .bat-—Ñ–∞–π–ª-—è—Ä–ª—ã–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Maestro –Ω–∞ Windows
    """
    log("üìå –°–æ–∑–¥–∞—ë–º —è—Ä–ª—ã–∫ –¥–ª—è Maestro –Ω–∞ Windows...")
    script_dir = Path.cwd()
    shortcut_path = script_dir / "–ó–∞–ø—É—Å—Ç–∏—Ç—å Maestro.bat"

   

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è .bat —Ñ–∞–π–ª–∞
    bat_content = f'''@echo off
    chcp 65001 >nul
echo –ó–∞–ø—É—Å–∫–∞–µ–º Maestro...
wsl -d Ubuntu -u {wsl_user} -e bash -c "export SCHRODINGER={schrod_dir}; $SCHRODINGER/maestro"
if %errorlevel% neq 0 (
    echo.
    echo –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Maestro.
    echo –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ WSL –∑–∞–ø—É—â–µ–Ω –∏ Schr√∂dinger —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    pause
)
'''

    try:
        shortcut_path.write_text(bat_content, encoding='utf-8')
        log(f"‚úÖ –Ø—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω: {shortcut_path}")
        log("üí° –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª –∏–ª–∏ –≤ –º–µ–Ω—é –ü—É—Å–∫")
    except Exception as e:
        log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫: {e}")

def main():
    global LOG_FILE

    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Schr√∂dinger Suite 2025-2")
    print("=" * 60)

    # --- 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    current_dir = Path.cwd()
    log(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {current_dir}")

    # --- 2. –ü—É—Ç—å –∫ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—É
    distro_dir = current_dir / "Schrodinger_Suites_2025-2_Linux-x86_64"
    install_script = distro_dir / "INSTALL"
    if not install_script.exists():
        log(f"üõë –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_script}")
        log("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ —Å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–º.")
        sys.exit(1)

    # --- 3. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç–∏
    schrod_dir_input = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Schr√∂dinger [/opt/schrodinger]: ").strip()
    schrod_dir = Path(schrod_dir_input or "/opt/schrodinger").resolve()
    log(f"–ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {schrod_dir}")

    thirdparty_dir_input = input(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è thirdparty [{schrod_dir}/thirdparty]: ").strip()
    thirdparty_dir = Path(thirdparty_dir_input or f"{schrod_dir}/thirdparty").resolve()

    tmp_dir_input = input(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ [/tmp/schrodinger]: ").strip()
    tmp_dir = Path(tmp_dir_input or "/tmp/schrodinger").resolve()

    log(f"–ü—É—Ç—å thirdparty: {thirdparty_dir}")
    log(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {tmp_dir}")

    # --- 4. –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    log("üîß –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    try:
        schrod_dir.mkdir(parents=True, exist_ok=True)
        thirdparty_dir.mkdir(parents=True, exist_ok=True)
        tmp_dir.mkdir(parents=True, exist_ok=True)
    except PermissionError:
        log(f"üõë –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {schrod_dir}")
        log("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo: sudo python3 install_schrodinger.py")
        sys.exit(1)

    # --- 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logs_dir = schrod_dir / "logs"
    logs_dir.mkdir(exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    LOG_FILE = logs_dir / f"install_{timestamp}.log"
    log(f"üìÑ –õ–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {LOG_FILE}")

    # --- 6. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ)
    all_files = [
        "bioluminate-v5.9-Linux-x86_64.tar.gz",
        "canvas-v6.4-Linux-x86_64.tar.gz",
        "combiglide-v7.7-Linux-x86_64.tar.gz",
        "desmond-v8.2-Linux-x86_64.tar.gz",
        "docs_data-v7.0-docs.tar.gz",
        "epik-v7.2-Linux-x86_64.tar.gz",
        "glide-v10.7-Linux-x86_64.tar.gz",
        "impact-v10.7-Linux-x86_64.tar.gz",
        "jaguar-v12.8-Linux-x86_64.tar.gz",
        "knime-v7.0-Linux-x86_64.tar.gz",
        "macromodel-v14.8-Linux-x86_64.tar.gz",
        "maestro-v14.4-Linux-x86_64.tar.gz",
        "mmshare-v7.0-Linux-x86_64.tar.gz",
        "psp-v8.0-Linux-x86_64.tar.gz",
        "psp-homology-thirdparty-databases.tar.gz",
        "qikprop-v8.4-Linux-x86_64.tar.gz",
        "watermap-v6.3-Linux-x86_64.tar.gz"
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    missing = [f for f in all_files if not (distro_dir / f).exists()]
    if missing:
        log(f"üõë –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for f in missing:
            log(f"   - {f}")
        sys.exit(1)
    log(f"‚úÖ –í—Å–µ 17 —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")

    # --- 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è GUI
    install_x11_deps()

    # --- 8. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env = os.environ.copy()
    env["AUTO_MMSHARE"] = "y"
    env["AUTO_DOCS"] = "y"
    env["AUTO_DATA"] = "y"
    env["AUTO_PATCH"] = "y"

    # --- 9. –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º –ø—Ä–∏–º–µ—Ä–µ)
    cmd = [
        "bash", str(install_script),
        "-b",
        "-s", str(schrod_dir),
        "-d", str(distro_dir),
        "-t", str(thirdparty_dir),
        "-k", str(tmp_dir)
    ] + all_files

    # --- 10. –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    log("üîÑ –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Schr√∂dinger...")
    result = subprocess.run(
        cmd,
        env=env,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        encoding='utf-8',
        cwd=str(distro_dir)
    )

    for line in result.stdout.splitlines():
        log(f"INSTALL | {line}")

    if result.returncode != 0:
        log("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        sys.exit(1)
    else:
        log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Schr√∂dinger –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

       # --- 11. –ö–æ–ø–∏—Ä—É–µ–º libmmfileshared.so ---
    source_so = current_dir / "internal" / "lib" / "libmmfileshared.so"
    target_lib = schrod_dir / "internal" / "lib"
    target_so = target_lib / "libmmfileshared.so"

    if source_so.exists():
        log(f"üîÅ –ö–æ–ø–∏—Ä—É–µ–º {source_so.name} –≤ {target_so}...")
        target_lib.mkdir(parents=True, exist_ok=True)
        shutil.copy2(source_so, target_so)
        log("‚úÖ libmmfileshared.so —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
    else:
        log("‚ö†Ô∏è  –§–∞–π–ª libmmfileshared.so –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ internal")

    # --- 12. –ö–æ–ø–∏—Ä—É–µ–º licenses (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ---
    source_licenses = current_dir / "licenses"
    target_licenses = schrod_dir / "licenses"

    if source_licenses.exists():
        log(f"üîÅ –ö–æ–ø–∏—Ä—É–µ–º licenses –≤ {target_licenses}...")
        if target_licenses.exists():
            shutil.rmtree(target_licenses)
        shutil.copytree(source_licenses, target_licenses)
        log("‚úÖ –ü–∞–ø–∫–∞ licenses —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞")

    # --- 12. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WSL
    wsl_user = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WSL (–¥–ª—è —è—Ä–ª—ã–∫–∞): ").strip()
    if not wsl_user:
        log("‚ö†Ô∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–≤–µ–¥–µ–Ω–æ, —è—Ä–ª—ã–∫ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
    else:
        create_windows_shortcut(schrod_dir, wsl_user)

    # --- 13. –§–∏–Ω–∞–ª
    log("=" * 50)
    log("‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    log(f"üñ•Ô∏è  Schr√∂dinger —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {schrod_dir}")
    log(f"üìÑ –õ–æ–≥: {LOG_FILE}")
    log(f"üí° –î–æ–±–∞–≤—å—Ç–µ –≤ ~/.bashrc: export SCHRODINGER={schrod_dir}")
    log(f"üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: \$SCHRODINGER/utilities/configure –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–∏")

    choice = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å utilities/configure? [y/N]: ").strip().lower()
    if choice in ['y', 'yes']:
        configure_path = schrod_dir / "utilities" / "configure"
        if configure_path.exists():
            log("üîß –ó–∞–ø—É—Å–∫–∞–µ–º Schr√∂dinger Configuration Tool...")
            run([str(configure_path)], shell=True)
        else:
            log(f"‚ö†Ô∏è –§–∞–π–ª {configure_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    main()

